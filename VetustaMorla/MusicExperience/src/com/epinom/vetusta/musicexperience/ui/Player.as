package com.epinom.vetusta.musicexperience.ui{	import com.epinom.vetusta.musicexperience.data.DataModel;	import com.epinom.vetusta.musicexperience.events.EventComplex;	import com.epinom.vetusta.musicexperience.vos.SoundVO;		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.utils.Timer;
		public class Player extends MovieClip	{		/**		 * @properties		 * Interfaz de usuario		 */		private var _pinForUserTrackSelected:MovieClip;		private var _playPlayerBtn:SimpleButton;		private var _pausePlayerBtn:SimpleButton;		private var _stopPlayerBtn:SimpleButton;		private var _progressBarPlayerMc:MovieClip;		private var _activityIndicator:MovieClip;		private var _modalLayerButton:SimpleButton;				/**		 * @properties		 * Control de sonido		 */		private var _trackIndexInDiscSelected:uint;		private var _sound:Sound;		private var _soundChannel:SoundChannel;		private var _isSoundPlaying:Boolean;		private var _soundDuration:String;		private var _soundCurrentTime:String;		private var _soundTimer:Timer;		private var _pausePoint:Number;						/**		 * @methods		 * Constructor		 */		public function Player() 		{			super();			trace("Player->Player()");						// Guardando referencias a objetos visuales			_playPlayerBtn = playPlayerButton;			_pausePlayerBtn = pausePlayerButton;			_stopPlayerBtn = stopPlayerButton;			_progressBarPlayerMc = progressBarPlayer;			_pausePoint = 0.00;						// Configurando visibilidad de componetes			_playPlayerBtn.visible = false;						// Configurando detectores de eventos			_playPlayerBtn.addEventListener(MouseEvent.CLICK, onSoundPlayHandler);			_pausePlayerBtn.addEventListener(MouseEvent.CLICK, onSoundPauseHandler);			_stopPlayerBtn .addEventListener(MouseEvent.CLICK, onSoundStopHandler);						// Inicializacion de las variables que controlan el sonido			_sound = new Sound();			_isSoundPlaying = false;			_soundTimer = new Timer(1 * 1000);		}		/**		 * @methods		 * Getters y Setters		 */		public function get trackIndexInDiscSelected():uint { return _trackIndexInDiscSelected; }		public function set trackIndexInDiscSelected(value:uint):void { _trackIndexInDiscSelected = value; }		public function get isSoundPlaying():Boolean { return _isSoundPlaying; }		public function set isSoundPlaying(value:Boolean):void { _isSoundPlaying = value; }		public function get pinForUserTrackSelected():MovieClip { return _pinForUserTrackSelected; }		public function set pinForUserTrackSelected(value:MovieClip):void { _pinForUserTrackSelected = value; }				public function get playPlayerBtn():SimpleButton { return _playPlayerBtn; }		public function set playPlayerBtn(value:SimpleButton):void { _playPlayerBtn = value; }		public function get pausePlayerBtn():SimpleButton { return _pausePlayerBtn; }		public function set pausePlayerBtn(value:SimpleButton):void { _pausePlayerBtn = value; }		public function get progressBarPlayerMc():MovieClip { return _progressBarPlayerMc; }		public function set progressBarPlayerMc(value:MovieClip):void { _progressBarPlayerMc = value; }			public function get activityIndicator():MovieClip { return _activityIndicator; }		public function set activityIndicator(value:MovieClip):void { 			_activityIndicator = value;			_activityIndicator.visible = false;		}			public function get modalLayerButton():SimpleButton { return _modalLayerButton; }		public function set modalLayerButton(value:SimpleButton):void { 			_modalLayerButton = value;			_modalLayerButton.visible = false;			_modalLayerButton.useHandCursor = false;		}				/**		 * @method		 * Carga y reproduce un sonido externo		 */		public function loadSoundByIndex(index:uint, pin:MovieClip = null):void		{			trace("loadSoundByIndex with index: ", index);						// Guardando PIN asociado a la cancion seleccionada por el usario en el wizard			if(pin != null)				_pinForUserTrackSelected = pin;						// Si existe un sonido en reproduccion			if(_isSoundPlaying)				_soundChannel.stop();						// Obteniendo url del sonido			var urlSound:String = (DataModel.getInstance().settings.soundList[index] as SoundVO).url;			trace("URL del sonido seleccionado: ", urlSound);						// Creando peticion de sonido externo			var request:URLRequest = new URLRequest(urlSound);						// Ejecutando carga del sonido y configurando su channel			_sound = new Sound();			_sound.addEventListener(Event.COMPLETE, completeHandler);			_sound.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			_sound.load(request);						// Haciendo visible el indicador de actividad			_activityIndicator.visible = true;			_modalLayerButton.visible = true;						// Timer			_soundTimer.addEventListener(TimerEvent.TIMER, updateSoundCurrentTimeHandler);			_soundTimer.start();						// Actualizando variables de control			_trackIndexInDiscSelected = index;		}				public function userChangeTrackHandler(evt:EventComplex):void 		{			trace("[Player] Evento USER_CHANGE_TRACK_EVENT capturado: ", evt.data.trackIndex);			loadSoundByIndex(uint(evt.data.trackIndex));			evt.stopPropagation();		}				private function updateSoundCurrentTimeHandler(evt:TimerEvent):void		{			var secs:Number = Math.round(_soundChannel.position/1000); 			var sound_mins:Number = Math.floor(secs/60); 			var sound_secs:Number = secs - (60 * sound_mins); 						var m:String = (sound_mins < 10) ? String("0" + sound_mins.toString()) : sound_mins.toString();			var s:String = (sound_secs < 10) ? String("0" + sound_secs.toString()) : sound_secs.toString();			//trace("_sound.position: ", m + ":" + s);  						// Actualizando campos de tiempo			currentTime_dtxt.text = m + ":" + s;						// Actualizando la posicion de la barra de posicion			_progressBarPlayerMc.gotoAndStop(Math.ceil(_soundChannel.position * 100 / _sound.length));		}				private function completeHandler(event:Event):void 		{			trace("completeHandler: " + event);						// Invisibilizando el indicador de actividad			_activityIndicator.visible = false;			_modalLayerButton.visible = false;						// Despachando evento para cambiar al estado siguiente de la ventana modal			dispatchEvent(new Event(DataModel.SOUND_SELECTED_LOADED));						// Si existe un sonido en reproduccion			if(_isSoundPlaying) {				_soundChannel.stop();				trace("Deteniendo sonido anterior...");			}						_soundChannel = _sound.play();			_soundChannel.addEventListener(Event.SOUND_COMPLETE, onSoundCompleteHandler);			trace("Sound channel listener complete added...");						_isSoundPlaying = true;			var soundTransform = new SoundTransform();			soundTransform.volume = 1.0;	// TODO: CAMBIAR A 1.0 EL VOLUMEN CUANDO SE QUIERA ESCUCHAR			_soundChannel.soundTransform = soundTransform;						trace("_sound.length[milisegundos]: ", _sound.length);			var segundos:Number = Math.round(_sound.length/1000); 			var musica_min:Number = Math.floor(segundos/60); 			var musica_seg:Number = segundos-(60*musica_min); 						var m:String = (musica_min < 10) ? String("0" + musica_min.toString()) : musica_min.toString();			var s:String = (musica_seg < 10) ? String("0" + musica_seg.toString()) : musica_seg.toString();			trace("_sound.duration: ", m + ":" + s); 						// Actualizando campos de tiempo			totalTime_dtxt.text = m + ":" + s;		}				private function id3Handler(event:Event):void {			trace("id3Handler: " + event);		}				private function ioErrorHandler(event:Event):void {			trace("ioErrorHandler: " + event);		}				private function progressHandler(event:ProgressEvent):void {			trace("progressHandler: " + event);		}				private function onSoundPlayHandler(evt:MouseEvent):void		{			if(!_isSoundPlaying)			{				_soundChannel.removeEventListener(Event.SOUND_COMPLETE, onSoundCompleteHandler);				_soundChannel = _sound.play(_pausePoint);				_soundChannel.addEventListener(Event.SOUND_COMPLETE, onSoundCompleteHandler);				_playPlayerBtn.visible = false;				_pausePlayerBtn.visible = true;				_soundTimer.start();				_isSoundPlaying = true;			}		}				private function onSoundPauseHandler(evt:MouseEvent):void		{			if(_isSoundPlaying)			{				_pausePoint = _soundChannel.position;				_soundChannel.stop();								_playPlayerBtn.visible = true;				_pausePlayerBtn.visible = false;				_soundTimer.stop();				_isSoundPlaying = false;			}		}				private function onSoundStopHandler(evt:MouseEvent = null):void		{			if(_isSoundPlaying)			{				_soundChannel.stop();				_progressBarPlayerMc.gotoAndStop(1);				currentTime_dtxt.text = "00:00";				_pausePoint = 0.00;				_playPlayerBtn.visible = true;				_pausePlayerBtn.visible = false;				_soundTimer.stop();				_isSoundPlaying = false;			}		}				private function onSoundCompleteHandler(evt:Event):void		{			trace("[PLayer] Actual track is over...");			onSoundStopHandler(null);			_playPlayerBtn.visible = false;			_pausePlayerBtn.visible = true;			var endSoundEvent:Event = new Event(DataModel.COMPLETE_TRACK_EVENT);			trace("[Player] Track complete event dispatched...");			dispatchEvent(endSoundEvent);		}	}}