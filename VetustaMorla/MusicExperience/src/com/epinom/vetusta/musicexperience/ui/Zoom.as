package com.epinom.vetusta.musicexperience.ui{	import caurina.transitions.Tweener;		import com.greensock.*;	import com.greensock.TweenLite;	import com.greensock.easing.*;	import com.greensock.easing.Linear;	import com.greensock.plugins.TransformAroundPointPlugin;	import com.greensock.plugins.TweenPlugin;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;		public class Zoom extends MovieClip	{		// Componentes		private var _upButton:SimpleButton;		private var _downButton:SimpleButton;		private var _thumb:MovieClip;		private var _bar:MovieClip;				//  Variables de control de zoom		private var _currentScale:Number;		private var _zoomTarget:MovieClip;		private var _initWidth:Number;		private var _initHeight:Number;		private var _currentIndex:uint;		private var _currentPosition:Number;		private var _counter:uint;		private var _enabledZoom:Boolean;				private var _thumbPositionList:Array;				public function Zoom()		{			super();			trace("Zoom->Zoom()");			TweenPlugin.activate([TransformAroundPointPlugin]); //activation is permanent in the SWF, so this line only needs to be run once.						// Obteniendo referencia a los elementos visuales del componente personalizado			_upButton = upButton;			_downButton = downButton;			_thumb = thumb;			_bar = bar;						// Inicializan variables de control			_currentScale = 1.0;			_zoomTarget = null;			_currentPosition =  104.25;			_currentIndex = 2;			_thumbPositionList = new Array(-57.0, 24.0, 104.25);			_counter = 3;			_enabledZoom = true;						// Configurando detectores de eventos			configEventListerns();		}				public function get zoomTarget():MovieClip { return _zoomTarget; }		public function set zoomTarget(value:MovieClip):void 		{ 			_zoomTarget = value;			_initWidth = _zoomTarget.width;			_initHeight = _zoomTarget.height;						// Trazas			trace("_initWidth: ", _initWidth);			trace("_initHeight: ", _initHeight);		}				private function configEventListerns():void		{			_upButton.addEventListener(MouseEvent.CLICK, onUpScaleEventHandler);			_downButton.addEventListener(MouseEvent.CLICK, onDownScaleEventHandler);		}				private function onUpScaleEventHandler(evt:MouseEvent):void		{			trace("Zoom->onUpScaleEventHandler()");			trace("_counter: ", _counter);			trace("_enabledZoom: ", _enabledZoom);						if(_zoomTarget != null)			{				if(_counter < 4 && _enabledZoom)				{					// Verificando en que cuadrante se encuentra el punto central de la pantalla respecto al mapa					var stage:Stage = _zoomTarget.parent as Stage;					var visualCenterPointInMap:Point = _zoomTarget.globalToLocal(new Point(stage.stageWidth / 2, stage.stageHeight / 2));										trace("visualCenterPointInMap: ", visualCenterPointInMap);					trace("_zoomTarget.width: ", _zoomTarget.width);					trace("_zoomTarget.height: ", _zoomTarget.height);										var pivotePoint:Point = new Point(stage.stageWidth / 2, stage.stageHeight / 2);					/*					if(visualCenterPointInMap.x < 0 && visualCenterPointInMap.y < 0) // CUADRANTE 1 DEL MAPA 					{							trace("PRIMER CUADRANTE");						pivotePoint = new Point(stage.x, stage.y);					} 					else if(visualCenterPointInMap.x > 0 && visualCenterPointInMap.y < 0)	// CUADRANTE 2 DEL MAPA						{ 						trace("SEGUNDO CUADRANTE");						pivotePoint = new Point(stage.stageWidth, stage.y);					} 					else if(visualCenterPointInMap.x > 0 && visualCenterPointInMap.y > 0)	// CUADRANTE 3 DEL MAPA							{ 						trace("TERCER CUADRANTE");						pivotePoint = new Point(stage.stageWidth, stage.stageHeight);					} 					else if(visualCenterPointInMap.x < 0 && visualCenterPointInMap.y > 0)	// CUADRANTE 4 DEL MAPA							{ 						trace("CUARTO CUADRANTE");						pivotePoint = new Point(stage.x, stage.stageHeight);					}					*/										// Actualizando variables de control					_currentIndex++;					_counter++;					_currentPosition = _thumbPositionList[_currentIndex];					//_currentScale += .10;										// Nuevo metodo					//var currentWidth:Number = _initWidth * (_counter * 0.25);					//var currentHeigth:Number = _initHeight * (_counter * 0.25);										var currentWidth:Number;					var currentHeigth:Number;					if(_counter == 3)					{						currentWidth = _initWidth * 0.75;						currentHeigth = _initHeight * 0.75;					}					else if(_counter == 2)					{						currentWidth = _initWidth * 0.50;						currentHeigth = _initHeight * 0.50;					}					else					{						currentWidth = _initWidth * 0.25;						currentHeigth = _initHeight * 0.25;					}										// Inhabilitando zoom hasta que no termine la animación					_enabledZoom = false;										// Aplicando cambios a objetos visuales					Tweener.addTween(_thumb, {x:_currentPosition, time:1, transition:"linear", onComplete:activateZoomControls});					TweenLite.to(_zoomTarget, 1, {transformAroundPoint:{point:pivotePoint, width:currentWidth, height:currentHeigth}, ease:Linear.easeNone});					/*					Tweener.addTween(_thumb, {x:_currentPosition, time:1, transition:"linear"});					Tweener.addTween(_zoomTarget, {scaleX:_currentScale, time:1, transition:"linear"});					Tweener.addTween(_zoomTarget, {scaleY:_currentScale, time:1, transition:"linear"});					*/										// Trazas					trace("_currentPosition: ", _currentPosition);					trace("_counter :", _counter);					trace("currentWidth: ", currentWidth);					trace("currentHeigth: ", currentHeigth);				}			} else {				throw new Error("Zoom target undefined...");			}		}				private function onDownScaleEventHandler(evt:MouseEvent):void		{			trace("Zoom->onDownScaleEventHandler()");			trace("_counter: ", _counter);			trace("_enabledZoom: ", _enabledZoom);						if(_zoomTarget != null)			{				if(_counter > 1 && _enabledZoom)				{					// Verificando en que cuadrante se encuentra el punto central de la pantalla respecto al mapa					var stage:Stage = _zoomTarget.parent as Stage;					var visualCenterPointInMap:Point = _zoomTarget.globalToLocal(new Point(stage.stageWidth / 2, stage.stageHeight / 2));										trace("visualCenterPointInMap: ", visualCenterPointInMap);					trace("_zoomTarget.width: ", _zoomTarget.width);					trace("_zoomTarget.height: ", _zoomTarget.height);										var pivotePoint:Point = new Point(0, 0);					if(visualCenterPointInMap.x < 0 && visualCenterPointInMap.y < 0) // CUADRANTE 1 DEL MAPA 					{							trace("PRIMER CUADRANTE");						pivotePoint = new Point(stage.x, stage.y);					} 					else if(visualCenterPointInMap.x > 0 && visualCenterPointInMap.y < 0)	// CUADRANTE 2 DEL MAPA						{ 						trace("SEGUNDO CUADRANTE");						pivotePoint = new Point(stage.stageWidth, stage.y);					} 					else if(visualCenterPointInMap.x > 0 && visualCenterPointInMap.y > 0)	// CUADRANTE 3 DEL MAPA							{ 						trace("TERCER CUADRANTE");						pivotePoint = new Point(stage.stageWidth, stage.stageHeight);					} 					else if(visualCenterPointInMap.x < 0 && visualCenterPointInMap.y > 0)	// CUADRANTE 4 DEL MAPA							{ 						trace("CUARTO CUADRANTE");						pivotePoint = new Point(stage.x, stage.stageHeight);					}										/*					var pivotePoint:Point = new Point(0, 0);					if(visualCenterPointInMap.x < 0 && visualCenterPointInMap.y < 0) // CUADRANTE 1 DEL MAPA 					{							trace("PRIMER CUADRANTE");						pivotePoint = new Point(-_zoomTarget.width / 2, -_zoomTarget.height / 2);					} 					else if(visualCenterPointInMap.x > 0 && visualCenterPointInMap.y < 0)	// CUADRANTE 2 DEL MAPA						{ 						trace("SEGUNDO CUADRANTE");						pivotePoint = new Point(_zoomTarget.width / 2, -_zoomTarget.height / 2);					} 					else if(visualCenterPointInMap.x > 0 && visualCenterPointInMap.y > 0)	// CUADRANTE 3 DEL MAPA							{ 						trace("TERCER CUADRANTE");						pivotePoint = new Point(_zoomTarget.width / 2, _zoomTarget.height / 2);					} 					else if(visualCenterPointInMap.x < 0 && visualCenterPointInMap.y > 0)	// CUADRANTE 4 DEL MAPA							{ 						trace("CUARTO CUADRANTE");						pivotePoint = new Point(-_zoomTarget.width / 2, _zoomTarget.height / 2);					}					*/										// Actualizando variables de control					_currentIndex--;					_counter--;					_currentPosition = _thumbPositionList[_currentIndex];					//_currentScale -= .10;										// Nuevo metodo					//var currentWidth:Number = _initWidth * (_counter * 0.25);					//var currentHeigth:Number = _initHeight * (_counter * 0.25);										var currentWidth:Number;					var currentHeigth:Number;					if(_counter == 3)					{						currentWidth = _initWidth * 0.75;						currentHeigth = _initHeight * 0.75;					}					else if(_counter == 2)					{						currentWidth = _initWidth * 0.50;						currentHeigth = _initHeight * 0.50;					}					else					{						currentWidth = _initWidth * 0.25;						currentHeigth = _initHeight * 0.25;					}										// Inhabilitando zoom hasta que no termine la animación					_enabledZoom = false;										// Aplicando cambios a objetos visuales					Tweener.addTween(_thumb, {x:_currentPosition, time:1, transition:"linear", onComplete:activateZoomControls});					TweenLite.to(_zoomTarget, 1, {transformAroundPoint:{point:pivotePoint, width:currentWidth, height:currentHeigth}, ease:Linear.easeNone});										/*					Tweener.addTween(_thumb, {x:_currentPosition, time:1, transition:"linear"});					Tweener.addTween(_zoomTarget, {scaleX:_currentScale, time:1, transition:"linear"});					Tweener.addTween(_zoomTarget, {scaleY:_currentScale, time:1, transition:"linear"});					*/										// Trazas					trace("_currentPosition: ", _currentPosition);					trace("_counter :", _counter);					trace("currentWidth: ", currentWidth);					trace("currentHeigth: ", currentHeigth);					trace("pivotePoint: ", pivotePoint);				}			} else {				throw new Error("Zoom target undefined...");			}		}				private function activateZoomControls():void {			trace("Habilitando controles para el zoom...");			_enabledZoom = true;		}	}}