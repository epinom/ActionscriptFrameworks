package com.epinom.lan.machupicchu.controllers{	import caurina.transitions.Tweener;		import com.digitalsurgeons.loading.BulkLoader;	import com.epinom.lan.machupicchu.models.DataModel;		import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.LocalConnection;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.system.Security;	import flash.system.SecurityDomain;	import flash.system.System;	public class LanMachuPicchuFacebookAppController extends Sprite	{		/**		 * @property		 * Controla si la apicacion corre en el dominio de facebook		 */		public static const ACTIVE_URL_FACEBOOK:Boolean = true;				/**		 * @property		 * Objeto responsable de cargas multiples de ficheros externos		 */		private var bulkLoader:BulkLoader;				/**		 * @property		 * Objeto contenedor de variables externas enviadas desde el HTML/PHP		 */		private var flashvars:Object;				/**		 * @property		 * Variables para comunicacion entre AS3 y Javascript en un entorno Facebook		 */		private var connection:LocalConnection; 		private var connectionName:String;				/**		 * @property		 * Loader visual		 */		private var lanVisualLoader:MovieClip;					/**		 * @property		 * Referencia al swf "main.swf"		 */		private var mainMovieClip:MovieClip;		private var mainLoader:Loader;				public function LanMachuPicchuFacebookAppController()		{			super();			trace("LanMachuPicchuFacebookAppController->LanMachuPicchuFacebookAppController()");						System.useCodePage = false;						// Agregando cualquier dominio para temas de seguridad de Flash Player			if(ACTIVE_URL_FACEBOOK)			{				Security.allowInsecureDomain("*");				Security.allowDomain("*");				Security.allowDomain(DataModel.URL_FACEBOOK_DOMAIN + "app.swf");				Security.allowDomain(DataModel.URL_FACEBOOK_DOMAIN + "main.swf");				Security.loadPolicyFile(DataModel.URL_FACEBOOK_DOMAIN + "crossdomain.xml");			}						// Inicializando propiedades			flashvars = null;							// Inicializando aplicacion			init();		}				/**		 * @method		 * Inicializa la apicacion		 */		private function init():void		{			trace("LanMachuPicchuFacebookAppController->init()");						// Iniciando carga de elementos externos			bulkLoader = new BulkLoader("AppBulkloader");			bulkLoader.logLevel = BulkLoader.LOG_INFO;						// Configurando detectores de eventos			this.loaderInfo.addEventListener(Event.COMPLETE, onLoaderComplete);						}				/**		 * @event		 * Ejecuta acciones una vez terminada de cargarse la pelicula principal "app.swf"		 */		private function onLoaderComplete(evt:Event):void 		{				trace("LanMachuPicchuFacebookAppController->onLoaderComplete()");						// Obteniendo flashvars			flashvars = (this.root.loaderInfo as LoaderInfo).parameters;						// Para probar en local			/*			if(flashvars.access_token == null)				flashvars.access_token = DataModel.ACCESS_TOKEN;			*/						// Trazas			/*			var flag:Boolean = true;			if(flashvars.access_token != null && flag) {				(console as TextField).appendText("\nflashvars: " + flashvars.toString());				(console as TextField).appendText("\nflashvars.access_token: " + flashvars.access_token);			}			*/						// Pasando flashvars al modelo de datos								if(flashvars != null) {				//(console as TextField).appendText("\nPasando flashvars al modelo de datos");				DataModel.getInstance().flashvars = flashvars;			}						// Adicionando loader a la pelicula, la clase LanVisualLoader es el identificador de la biblioteca del objeto loader en la pelicula "app.swf"			lanVisualLoader = new LanVisualLoader();			lanVisualLoader.x = this.stage.stageWidth / 2 ;			lanVisualLoader.y = this.stage.stageHeight / 2 ;			this.addChild(lanVisualLoader);							// Cargando "main.swf" de forma directa sin utilizar librerias externas			mainLoader = new Loader();			var mainContext:LoaderContext = new LoaderContext();			mainContext.checkPolicyFile = true;			mainContext.securityDomain = SecurityDomain.currentDomain;			mainContext.applicationDomain = ApplicationDomain.currentDomain;			var mainURLRequest:URLRequest = new URLRequest(DataModel.URL_FACEBOOK_DOMAIN + "main.swf");			mainLoader.load(mainURLRequest);			mainLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onBulkElementLoadedHandler);			mainLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onBulkElementProgressHandler);			mainLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onErrorHandler);			this.addChild(mainLoader);			//this.addChild(console);		}				/**		 * @event		 * Ejecuta acciones una vez terminada las descargas de ficheros externos			 */		public function onBulkElementLoadedHandler(evt:Event):void 		{			trace("LanMachuPicchuFacebookAppController->onBulkElementLoadedHandler()");						// Desactivando detectores de eventos			mainLoader.contentLoaderInfo.removeEventListener(BulkLoader.COMPLETE, onBulkElementLoadedHandler);			mainLoader.contentLoaderInfo.removeEventListener(BulkLoader.PROGRESS, onBulkElementProgressHandler);				mainLoader.contentLoaderInfo.removeEventListener(BulkLoader.ERROR, onErrorHandler);						// Realizando animacion del objeto de loader visual			Tweener.addTween(lanVisualLoader, {alpha:0, time:1, transition:"easeOutCubic"});			//Tweener.addTween(lanVisualLoader, {x:lanVisualLoader.x, y:lanVisualLoader.y + 40, time:1, transition:"easeOutCubic"} );							// Obteniendo swf cargado			mainMovieClip = evt.target.content as MovieClip;			trace(mainMovieClip);									}				/**		 * @event		 * Ejecuta acciones mientras se descargan los ficheros externos			 */		public function onBulkElementProgressHandler(evt:ProgressEvent):void 		{			var percentLoaded:Number = evt.bytesLoaded/evt.bytesTotal;			percentLoaded = Math.round(percentLoaded * 100);			lanVisualLoader.bar_mc.gotoAndStop(percentLoaded);			if(evt.bytesLoaded == evt.bytesTotal)				lanVisualLoader.bar_mc.gotoAndStop(100);		}													/**		 * @event		 * Ejecuta acciones cuando se captura algun error en la descarga de ficheros externos		 */		public function onErrorHandler(evt:Event):void {				throw new Error(evt);		}	}}