package com.epinom.lan.machupicchu.controllers{	import br.com.stimuli.loading.BulkLoader;		import caurina.transitions.Tweener;		import com.adobe.images.JPGEncoder;	import com.adobe.protocols.dict.Database;	import com.epinom.lan.machupicchu.data.ConstellationGallery;	import com.epinom.lan.machupicchu.models.DataModel;	import com.epinom.lan.machupicchu.utils.StringUtils;	import com.epinom.lan.machupicchu.utils.XMLParser;	import com.epinom.lan.machupicchu.vos.ItemGalleryVO;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestHeader;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.net.navigateToURL;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.system.SecurityDomain;	import flash.system.System;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.utils.ByteArray;	public class LanMachuPicchuFacebookMainController extends MovieClip	{		/**		 * @property		 * Controla si la apicacion esta en FRANCES o en ESPAÑOL		 */		public static const LANGUAGE_FRENCH:Boolean = true;				/**		 * @property		 * Objeto responsable de cargas multiples de ficheros externos		 */		private var bulkLoader:BulkLoader;				private var actualWindow:MovieClip;		private var actionForModalWindow:String;		private var constellationImageLoader;		private var actualGalleryPage:int;		private var selectedConstellationItemForVote:ItemGalleryVO;				private var editingConstellation:Boolean;				public function LanMachuPicchuFacebookMainController()		{			super();			trace("LanMachuPicchuFacebookMainController->LanMachuPicchuFacebookMainController()");						System.useCodePage = false;			actualGalleryPage = 1;			selectedConstellationItemForVote = null;			editingConstellation = false;						// Iniciando carga de elementos externos			bulkLoader = new BulkLoader("MainBulkloader");			bulkLoader.logLevel = BulkLoader.LOG_INFO;						this.addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(evt:Event):void 		{			trace("LanMachuPicchuFacebookMainController->init()");						// COMENTAR LA SIGUIENTE LINEA CUANDO SE TRABAJE EN FACEBOOK, ES SOLO PARA PRUEBAS LOCALES			//DataModel.getInstance().setLocalData();						// Invisibilzando boton de participacion hasta que no se confirme que el usuario no ha participado			(sections.homeWindow.participateButton as SimpleButton).visible = false;			(sections.homeWindow.participateButton as SimpleButton).alpha = 0;						// Nivel de visibilidad para las ventanas			sections.homeWindow.alpha = 0;			sections.homeWindow.visible = false;			sections.registerWindow.alpha = 0;			sections.registerWindow.visible = false;			sections.newConstellationWindow.alpha = 0;			sections.newConstellationWindow.visible = false;			sections.confirmationNewConstellationWindow.alpha = 0;			sections.confirmationNewConstellationWindow.visible = false;			sections.constellationGalleryWindow.alpha = 0;			sections.constellationGalleryWindow.visible = false;						// Niveles de visibilidad para las modales			sections.constellationModalWindow.alpha = 0;			sections.constellationModalWindow.visible = false;			(sections.constellationModalWindow.shareButton as SimpleButton).visible = false;			(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;			sections.editMessageModalWindow.alpha = 0;			sections.editMessageModalWindow.visible = false;			sections.winnerModalWindow.alpha = 0;			sections.winnerModalWindow.visible = false;			sections.loserModalWindow.alpha = 0;			sections.loserModalWindow.visible = false;			sections.confirmationAwardModalWindow.alpha = 0;			sections.confirmationAwardModalWindow.visible = false;			sections.modalPanel.alpha = 0;			sections.modalPanel.visible = false;						// Textos tramos premios			/*			sections.confirmationNewConstellationWindow.date_dtxt.visible = false;			sections.confirmationNewConstellationWindow.msg_dtxt.visible = false;						sections.confirmationNewConstellationWindow.date_dtxt.text = DataModel.getInstance().awardText;			sections.constellationGalleryWindow.date_dtxt.text = DataModel.getInstance().awardText;			*/			trace("TRAMO DE PREMIO: ", DataModel.getInstance().awardText);						// Configurando detectores de eventos para las ventanas			configHandlers();						// Verificando si llega el ID de una constelacion por flashvars			if(DataModel.getInstance().flashvars != null && DataModel.getInstance().flashvars.cons_id != null)			{				trace("ID de constelacion recibida por LOCAL FLASHVARS");				trace("flashvars.access_token: ", DataModel.getInstance().flashvars.access_token);				trace("flashvars.constellation: ", DataModel.getInstance().flashvars.constellation);								// Accion de la ventana modal				actionForModalWindow = DataModel.VOTE_ACTION;								// Visualizando primera ventana				actualWindow = sections.constellationGalleryWindow;								// Creando ItemGalleryVO				selectedConstellationItemForVote = new ItemGalleryVO();				selectedConstellationItemForVote.id = DataModel.getInstance().flashvars.cons_id;				selectedConstellationItemForVote.name = DataModel.getInstance().flashvars.cons_name;				selectedConstellationItemForVote.author = DataModel.getInstance().flashvars.cons_user;				selectedConstellationItemForVote.urlImage = DataModel.getInstance().flashvars.cons_image;				selectedConstellationItemForVote.voted = DataModel.getInstance().flashvars.cons_voted;								// Lanzando galleria				showConstellationGalleryWindow();								// Mostrando ventana modal 				showConstellationModalWindow();			}			else			{				// Visualizando primera ventana				actualWindow = sections.homeWindow;				actualWindow.visible = true;				Tweener.addTween(actualWindow, {alpha:1, time:1, transition:"easeOutCubic"});								// Verificando si el usuario ya este registrado como participante				isRegistedUser();			}		}				public function configHandlers():void 		{			// Home Window			(sections.homeWindow.voteButton as SimpleButton).addEventListener(MouseEvent.CLICK, showConstellationGalleryWindow); 						// Register Window			(sections.registerWindow.acceptButton as SimpleButton).addEventListener(MouseEvent.CLICK, validateRegisterData);						if(!LANGUAGE_FRENCH) {			(sections.registerWindow.basesLegalesButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {																					navigateToURL(new URLRequest("http://www.btob.es/clientes/lan_constelacion/app/webroot/pdf/bases_legales.pdf"), "_blank");																					});			} else {				(sections.registerWindow.basesLegalesButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {					navigateToURL(new URLRequest("http://www.btob.es/clientes/lan_constelacion_fr/app/webroot/pdf/bases_legales.pdf"), "_blank");				});			}						// New Constelation Window			(sections.newConstellationWindow.saveImageButton as SimpleButton).addEventListener(MouseEvent.CLICK, saveImageToServer);						// Confirmation New Constellation Window			(sections.confirmationNewConstellationWindow.shareConstellationButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {																						actionForModalWindow = DataModel.SHARE_ACTION;																						showConstellationModalWindow();																					});						(sections.confirmationNewConstellationWindow.viewConstellationGalleryButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {																						showConstellationGalleryWindow();																					});									// Modal Windows			(sections.constellationModalWindow.closeButton as SimpleButton).addEventListener(MouseEvent.CLICK, onModalWindowCloseButtonHandler);			(sections.constellationModalWindow.shareButton as SimpleButton).addEventListener(MouseEvent.CLICK, shareConstellation);			(sections.constellationModalWindow.voteButton as SimpleButton).addEventListener(MouseEvent.CLICK, voteConstellation);			(sections.constellationModalWindow.editButton as SimpleButton).addEventListener(MouseEvent.CLICK, editConstellation);						// Edit Modal Window			(sections.editMessageModalWindow.acceptButton as SimpleButton).addEventListener(MouseEvent.CLICK, acceptEditButtonHandler);			(sections.editMessageModalWindow.cancelButton as SimpleButton).addEventListener(MouseEvent.CLICK, cancelEditButtonHandler);						// Constellation Gallery Window			(sections.constellationGalleryWindow.viewMyConstellationButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {																						actionForModalWindow = DataModel.SHARE_ACTION;																						showConstellationModalWindow()																					});			(sections.constellationGalleryWindow.createYourConstellationButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {																						actionForModalWindow = DataModel.SHARE_ACTION;																						showHomeWindow();																					});			(sections.constellationGalleryWindow.prevButton as SimpleButton).addEventListener(MouseEvent.CLICK, prevPageForGallery);			(sections.constellationGalleryWindow.nextButton as SimpleButton).addEventListener(MouseEvent.CLICK, nextPageForGallery);			(sections.constellationGalleryWindow as MovieClip).addEventListener(DataModel.SEARCH_EVENT, onSearchConstellationGalleryEventHandler);						for (var i:int = 0; i < 6; i++) 				(sections.constellationGalleryWindow.gallery["item_" + i].btn as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void 																					{																						var itemName:String = (evt.target.parent as MovieClip).name;																						var index:uint = itemName.lastIndexOf("_");																						var id:uint = uint(itemName.substr(index + 1));																																												trace("Id de la constelacion seleccionada: ", id);																																												selectedConstellationItemForVote = ConstellationGallery.getInstance().gallery[id] as ItemGalleryVO; 																											actionForModalWindow = DataModel.VOTE_ACTION;																						showConstellationModalWindow()																					});						// Winner Window			(sections.winnerModalWindow.acceptButton as SimpleButton).addEventListener(MouseEvent.CLICK, validateWinnerData);						// Loser Window			(sections.loserModalWindow.backToGalleryButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void 																					{																						// Transicion ventana y panel modal 																						Tweener.addTween(sections.modalPanel, {alpha:0, time:1, transition:"easeOutCubic"});																						Tweener.addTween(sections.loserModalWindow, {alpha:0, time:1, transition:"easeOutCubic", onComplete:onCompleteTransitionConfirmationModalWindow});																					});						// Confirmation Window			(sections.confirmationAwardModalWindow.backToGalleryButton as SimpleButton).addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void 																					{																						// Transicion ventana y panel modal 																						Tweener.addTween(sections.modalPanel, {alpha:0, time:1, transition:"easeOutCubic"});																						Tweener.addTween(sections.confirmationAwardModalWindow, {alpha:0, time:1, transition:"easeOutCubic", onComplete:onCompleteTransitionConfirmationModalWindow});																					});		} 				private function isRegistedUser():void		{			// Trazas de consola			/*			(sections.console as TextField).appendText("\nDataModel.getInstance().flashvars: " + DataModel.getInstance().flashvars);			(sections.console as TextField).appendText("\nDataModel.getInstance().flashvars.access_token: " + DataModel.getInstance().flashvars.access_token);			if(DataModel.getInstance().flashvars != null)				(sections.console as TextField).appendText("\nflashvars.access_token: " + DataModel.getInstance().flashvars.access_token);			else				(sections.console as TextField).appendText("\nDataModel.ACCESS_TOKEN: " + DataModel.ACCESS_TOKEN);			*/						// Enviando datos al servicio PHP de registro			trace("Enviando datos al servicio PHP de verificacion de usuario registrado...");						// Enviando variable al servicio PHP			var urlVars:URLVariables = new URLVariables();			if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;			else urlVars.access_token = DataModel.ACCESS_TOKEN;			trace("urlVars.access_token: ", urlVars.access_token);						//(sections.console as TextField).appendText("\nurlVars.access_token: " + urlVars.access_token);						// Opciones del servicio PHP			var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_IS_REGISTER_PHP_SERVICE);			urlPHPServiceRequest.method = URLRequestMethod.POST;			urlPHPServiceRequest.data = urlVars;						// Enviando datos al servicio			var urlLoaderPHPService:URLLoader = new URLLoader();			urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoaderPHPService.addEventListener(Event.COMPLETE, onIsUserRegisterPHPServiceComplete);			urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);			urlLoaderPHPService.load(urlPHPServiceRequest);		}				private function isWinnerRegistedUser():void		{			// Enviando datos al servicio PHP de registro			trace("Enviando datos al servicio PHP de verificacion de usuario registrado...");						// Enviando variable al servicio PHP			var urlVars:URLVariables = new URLVariables();			if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;			else urlVars.access_token = DataModel.ACCESS_TOKEN;			trace("urlVars.access_token: ", urlVars.access_token);						// Opciones del servicio PHP			var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_IS_REGISTER_PHP_SERVICE);			urlPHPServiceRequest.method = URLRequestMethod.POST;			urlPHPServiceRequest.data = urlVars;						// Enviando datos al servicio			var urlLoaderPHPService:URLLoader = new URLLoader();			urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoaderPHPService.addEventListener(Event.COMPLETE, onIsWinnerRegisterPHPServiceComplete);			urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);			urlLoaderPHPService.load(urlPHPServiceRequest);		}				private function showHomeWindow(evt:MouseEvent = null):void 		{			trace("Home window... ");			trace("actualWindow: ", actualWindow.name);						// Verificando si el usuario ya este registrado como participante			isRegistedUser();						// Transicion			transitionBetweenWindows(this.actualWindow, sections.homeWindow);		}				private function showRegisterWindow(evt:MouseEvent = null):void 		{			trace("Register window... ");			trace("actualWindow: ", actualWindow.name);						// Transicion			sections.registerWindow.statusMsg.visible = false;			transitionBetweenWindows(this.actualWindow, sections.registerWindow);		}				private function showNewConstellationWindow(evt:MouseEvent = null):void 		{			trace("New Constellation window... ");			trace("actualWindow: ", this.actualWindow.name);						// Transicion			sections.newConstellationWindow.statusMsg.visible = false;			transitionBetweenWindows(this.actualWindow, sections.newConstellationWindow);						// Habilitar boton de guardar			(sections.newConstellationWindow.saveImageButton as SimpleButton).visible = true;		}				private function showConfirmationNewConstellationWindow(evt:MouseEvent = null):void 		{			trace("Confirmation New Constellation window... ");			trace("actualWindow: ", this.actualWindow.name);						// Transicion						transitionBetweenWindows(this.actualWindow, sections.confirmationNewConstellationWindow);		}				private function showConstellationGalleryWindow(evt:MouseEvent = null):void 		{			trace("Gallery window... ");			trace("actualWindow: ", actualWindow.name);						// Invisibilizando objetos de la galeria			sections.constellationGalleryWindow.prevButton.visible = false;			sections.constellationGalleryWindow.viewMyConstellationButton.visible = false;			sections.constellationGalleryWindow.createYourConstellationButton.visible = false;			(sections.constellationGalleryWindow.results_dtxt as TextField).visible = false;			sections.constellationGalleryWindow.nextButton.visible = false;			sections.constellationGalleryWindow.gallery.item_0.alpha = 0;			sections.constellationGalleryWindow.gallery.item_1.alpha = 0;			sections.constellationGalleryWindow.gallery.item_2.alpha = 0;			sections.constellationGalleryWindow.gallery.item_3.alpha = 0;			sections.constellationGalleryWindow.gallery.item_4.alpha = 0;			sections.constellationGalleryWindow.gallery.item_5.alpha = 0;						// Invisibilizando el loading			(sections.constellationGalleryWindow.gallery.loading as MovieClip).visible = true;						// Haciendo peticion al servicio PHP que devuelte un XML con los datos de la galeria			try			{					// Enviando datos al servicio PHP de registro				trace("Enviando datos al servicio PHP de confeccion de galeria en tiempo real segun la pagina visualizada por el usuario...");								// Enviando variable al servicio PHP				var urlVars:URLVariables = new URLVariables();				if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;				else urlVars.access_token = DataModel.ACCESS_TOKEN;				trace("urlVars.access_token: ", urlVars.access_token);								// Completando con otras variables necesarias en este servicio				urlVars.page = actualGalleryPage;								// Opciones del servicio PHP				var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_GALLERY_PHP_SERVICE);				urlPHPServiceRequest.method = URLRequestMethod.POST;				urlPHPServiceRequest.data = urlVars;								// Enviando datos al servicio				var urlLoaderPHPService:URLLoader = new URLLoader();				urlLoaderPHPService.addEventListener(Event.COMPLETE, onConstellationGalleryPHPServiceComplete);				urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);				urlLoaderPHPService.load(urlPHPServiceRequest);								} catch(e:Error) { throw new Error(e.toString()); }						// TODO: Poner el tramo del premio						transitionBetweenWindows(this.actualWindow, sections.constellationGalleryWindow);		}				private function showLoserModalWindow(evt:MouseEvent = null):void 		{			trace("Loser window... ");			trace("actualWindow: ", actualWindow.name);						// Configurando para que la ventana actual sea la de share / vote			actualWindow = sections.constellationModalWindow;						// Transicion			transitionBetweenWindows(this.actualWindow, sections.loserModalWindow);		}				private function showWinnerModalWindow(evt:MouseEvent = null):void 		{			trace("Winner window... ");			trace("actualWindow: ", actualWindow.name);						// Configurando para que la ventana actual sea la de share / vote			actualWindow = sections.constellationModalWindow;						// Transicion			sections.winnerModalWindow.statusMsg.visible = false;			transitionBetweenWindows(this.actualWindow, sections.winnerModalWindow);		}				private function showConfirmationAwardModalWindow(evt:MouseEvent = null):void 		{			trace("Cofirmation award window... ");			trace("actualWindow: ", actualWindow.name);						// Configurando para que la ventana actual sea la de share / vote			if(actualWindow != sections.winnerModalWindow)				actualWindow = sections.constellationModalWindow;						// Transicion			transitionBetweenWindows(this.actualWindow, sections.confirmationAwardModalWindow);		}				/**		 * @event		 * Ejecuta acciones una vez se retorna la respuesta desde el servidor		 */		private function onConstellationGalleryPHPServiceComplete(evt:Event):void					{			trace("LanMachuPicchuFacebookMainController->onConstellationGalleryPHPServiceComplete()");			trace("evt.target.data: " + evt.target.data);							try			{				// Recuperando XML de la galeria 				var galleryXML:XML = new XML(evt.target.data);								// Parseando XML				XMLParser.parseConstellationGalleryXML(galleryXML);								// Mostrando la cantidad de elementos de la pagina correspondiente				if(ConstellationGallery.getInstance().gallery.length != 0)				{					(sections.constellationGalleryWindow.results_dtxt as TextField).visible = false;					for (var i:int = 0; i < ConstellationGallery.getInstance().gallery.length; i++) 					{						// Asignando titulo y autor a cada constelacion						sections.constellationGalleryWindow.gallery["item_" + i].title_dtxt.text = (ConstellationGallery.getInstance().gallery[i] as ItemGalleryVO).name;						sections.constellationGalleryWindow.gallery["item_" + i].author_dtxt.text = (ConstellationGallery.getInstance().gallery[i] as ItemGalleryVO).author;												// Cargando imagen de la constellacion						bulkLoader.add(new URLRequest(DataModel.URL_FILES + (ConstellationGallery.getInstance().gallery[i] as ItemGalleryVO).urlImage), 									{id: (ConstellationGallery.getInstance().gallery[i] as ItemGalleryVO).urlImage});												// Eliminando imagen anterior, si existe						if((sections.constellationGalleryWindow.gallery["item_" + i].container.image as MovieClip).numChildren > 0)							(sections.constellationGalleryWindow.gallery["item_" + i].container.image as MovieClip).removeChildAt(0);												// Configurando listeners						bulkLoader.addEventListener(BulkLoader.COMPLETE, onGalleryImagesLoadedHandler);						bulkLoader.addEventListener(BulkLoader.PROGRESS, onBulkElementProgressHandler);						bulkLoader.addEventListener(BulkLoader.ERROR, onErrorHandler);						bulkLoader.start();						}				}				else {					// Invisibilizando el loading					(sections.constellationGalleryWindow.gallery.loading as MovieClip).visible = false;					(sections.constellationGalleryWindow.results_dtxt as TextField).visible = true;				}													// TODO: Mandar a cargar las imagenes correspondientes a los items de la pagina											} catch(e:Error) { throw e; }					}				private function onGalleryImagesLoadedHandler(evt:Event):void 			{			// Eliminando los listeners			bulkLoader.removeEventListener(BulkLoader.COMPLETE, onGalleryImagesLoadedHandler);			bulkLoader.removeEventListener(BulkLoader.PROGRESS, onBulkElementProgressHandler);			bulkLoader.removeEventListener(BulkLoader.ERROR, onErrorHandler);						// Invisibilizando el loading			(sections.constellationGalleryWindow.gallery.loading as MovieClip).visible = false;						// Obteniendo imagenes cargadas para cada elemento de la galeria			for (var i:int = 0; i < ConstellationGallery.getInstance().gallery.length; i++) 			{				// Obteniendo elemento representativo de la galeria				var itemGalleryVO:ItemGalleryVO = ConstellationGallery.getInstance().gallery[i] as ItemGalleryVO;								// Obteniendo imagen relativa a este elemento y configurando su tamaño				var image:Bitmap = bulkLoader.getBitmap((ConstellationGallery.getInstance().gallery[i] as ItemGalleryVO).urlImage);				image.width = (sections.constellationGalleryWindow.gallery["item_" + i].container as MovieClip).width;				image.height = (sections.constellationGalleryWindow.gallery["item_" + i].container as MovieClip).height;								// Adicionando imagen a su contenedor correspondiente				(sections.constellationGalleryWindow.gallery["item_" + i].container.image as MovieClip).addChild(image);								// Animando aparicion del item de la galeria				Tweener.addTween(sections.constellationGalleryWindow.gallery["item_" + i], {alpha:1, time:1, transition:"easeOutCubic"});			}				// Trazas			trace("ConstellationGallery.getInstance().prevButtonActive: ", ConstellationGallery.getInstance().prevButtonActive);			trace("ConstellationGallery.getInstance().viewMyConstellationButtonActive: ", ConstellationGallery.getInstance().viewMyConstellationButtonActive);			trace("ConstellationGallery.getInstance().nextButtonActive: ", ConstellationGallery.getInstance().nextButtonActive);						// Visibilidad de botones			//sections.constellationGalleryWindow.viewMyConstellationButton.visible = ConstellationGallery.getInstance().viewMyConstellationButtonActive;			sections.constellationGalleryWindow.viewMyConstellationButton.visible = false;			//sections.constellationGalleryWindow.createYourConstellationButton.visible = !ConstellationGallery.getInstance().viewMyConstellationButtonActive;			sections.constellationGalleryWindow.createYourConstellationButton.visible = false;			sections.constellationGalleryWindow.prevButton.visible = ConstellationGallery.getInstance().prevButtonActive;			sections.constellationGalleryWindow.nextButton.visible = ConstellationGallery.getInstance().nextButtonActive;						// Eliminando todos los elementos cargados			bulkLoader.removeAll();		}				private function prevPageForGallery(evt:MouseEvent):void 		{			trace("LanMachuPicchuFacebookMainController->prevPageForGallery()");			actualGalleryPage--;			showConstellationGalleryWindow();		}					private function nextPageForGallery(evt:MouseEvent):void 		{			trace("LanMachuPicchuFacebookMainController->nextPageForGallery()");			actualGalleryPage++;			showConstellationGalleryWindow();		}		/**		 * @events		 * Modal Window Functions			 */		private function showConstellationModalWindow(evt:MouseEvent = null):void		{			trace("LanMachuPicchuFacebookMainController->showConstellationModalWindow()");			trace("actionForModalWindow: ", actionForModalWindow);						/*			(DataModel.getInstance().console as TextField).appendText("LanMachuPicchuFacebookMainController->showConstellationModalWindow()");			(DataModel.getInstance().console as TextField).appendText("actionForModalWindow: " + actionForModalWindow);			*/						sections.modalPanel.visible = true;			sections.constellationModalWindow.visible = true;			(sections.constellationModalWindow.container.loading as MovieClip).visible = true;			(sections.constellationModalWindow.winnerIcon as MovieClip).visible = false;			sections.constellationModalWindow.editButton.visible = false;			if(DataModel.LANGUAGE_FRENCH)				sections.constellationModalWindow.frenchMessage.visible = false;			if((sections.constellationModalWindow.container.image as MovieClip).numChildren > 0)				(sections.constellationModalWindow.container.image as MovieClip).removeChildAt(0);			Tweener.addTween(sections.modalPanel, {alpha:1, time:1, transition:"easeOutCubic"});			Tweener.addTween(sections.constellationModalWindow, {alpha:1, time:1, transition:"easeOutCubic"});						// Verificando si la constelacion ha sido votada anteriormente por este usuario			var isConstellationVoted:Boolean;			if(actionForModalWindow == DataModel.VOTE_ACTION)			{				isConstellationVoted = selectedConstellationItemForVote.voted;				trace("¿Esta constelacion ha sido votada?: ", isConstellationVoted);								// Visualizar boton de VOTE				//sections.constellationModalWindow.voteButton.visible = (actionForModalWindow == DataModel.VOTE_ACTION) && (!isConstellationVoted);				sections.constellationModalWindow.voteButton.visible = false;				sections.constellationModalWindow.shareButton.visible = false;			} 			else 			{				// Visualizar boton de SHARE				//sections.constellationModalWindow.shareButton.visible = true;				sections.constellationModalWindow.shareButton.visible = false;				sections.constellationModalWindow.voteButton.visible = false;			}							// Trazas			trace("sections.constellationModalWindow.shareButton.visible: ", sections.constellationModalWindow.shareButton.visible);			trace("sections.constellationModalWindow.voteButton.visible: ", sections.constellationModalWindow.voteButton.visible);						// Enviando datos al servicio PHP de registro			trace("Enviando datos al servicio PHP para cargar constelacion...");						// Enviando variable al servicio PHP			var urlVars:URLVariables = new URLVariables();			if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;			else urlVars.access_token = DataModel.ACCESS_TOKEN;			trace("urlVars.access_token: ", urlVars.access_token);						// Configurando variables necesarias para el registro			urlVars.action = actionForModalWindow;						// Configurando la ID de la constelacion a votar			if(actionForModalWindow == DataModel.VOTE_ACTION) 			{				// Si se ha recibido una accion de votar por GET se envia una variable adicional con la ID recibida				if(DataModel.getInstance().flashvars != null && DataModel.getInstance().flashvars.cons_id != null)					urlVars.id = DataModel.getInstance().flashvars.cons_id;				else					urlVars.id = selectedConstellationItemForVote.id;			}						// Opciones del servicio PHP			var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_DETAIL_CONSTELLATION_PHP_SERVICE);			urlPHPServiceRequest.method = URLRequestMethod.POST;			urlPHPServiceRequest.data = urlVars;						// Enviando datos al servicio			var urlLoaderPHPService:URLLoader = new URLLoader();			urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoaderPHPService.addEventListener(Event.COMPLETE, onDetailConstellationPHPServiceComplete);			urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);			urlLoaderPHPService.load(urlPHPServiceRequest);		}				private function onDetailConstellationPHPServiceComplete(evt:Event):void		{						trace("LanMachuPicchuFacebookMainController->onDetailConstellationPHPServiceComplete()");			trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						//(sections.console as TextField).appendText("\nevt.target.data: " + evt.target.data);			var loader:URLLoader = URLLoader(evt.target);			var success:Boolean = StringUtils.stringToBoolean(loader.data.success);			trace("Respuesta del servidor [success]: " + success.toString());						var response:Object = new Object();			response.id = String(loader.data.id);			response.title = String(loader.data.name);			response.image = String(loader.data.image);			response.author = String(loader.data.user);			response.votes = int(loader.data.votes);			response.winner = StringUtils.stringToBoolean(loader.data.winner);			response.action = String(loader.data.action);				response.voted = StringUtils.stringToBoolean(loader.data.voted);						if(loader.data.edit != null)				response.edit = StringUtils.stringToBoolean(loader.data.edit);						// Trazas de consola			/*			(sections.console as TextField).appendText("\nevt.target.data: " + evt.target.data);			(sections.console as TextField).appendText("\nRespuesta del servidor [response.voted]: " + response.voted);					*/			try			{				if(success) 				{					// Creando ItemGalleryVO					selectedConstellationItemForVote = new ItemGalleryVO();					selectedConstellationItemForVote.id = response.id;					selectedConstellationItemForVote.name = response.title;					selectedConstellationItemForVote.author = response.author;					selectedConstellationItemForVote.urlImage = response.image;					selectedConstellationItemForVote.voted = response.voted;										// Trazas					trace("Titulo de la constelacion: ", selectedConstellationItemForVote.name);					trace("Autor de la constelacion: ", selectedConstellationItemForVote.author);										// Mostrando datos en ventana modal					sections.constellationModalWindow.title_dtxt.text = response.title;					sections.constellationModalWindow.author_dtxt.text = response.author;					(sections.constellationModalWindow.number_dtxt as TextField).autoSize = TextFieldAutoSize.LEFT;					sections.constellationModalWindow.number_dtxt.text = response.votes;					if(LANGUAGE_FRENCH) sections.constellationModalWindow.label_dtxt.text = (response.votes > 1) ? "votes" : "votes";					else sections.constellationModalWindow.label_dtxt.text = (response.votes > 1) ? "votos" : "voto";					(sections.constellationModalWindow.label_dtxt).x = (sections.constellationModalWindow.number_dtxt as TextField).x + (sections.constellationModalWindow.number_dtxt as TextField).width - 2;										if(loader.data.edit != null) {						//sections.constellationModalWindow.editButton.visible = !response.edit;						sections.constellationModalWindow.editButton.visible = false;					}										if(actionForModalWindow == DataModel.VOTE_ACTION) {						//sections.constellationModalWindow.voteButton.visible = !response.voted;						sections.constellationModalWindow.voteButton.visible = false;					}										// Cargando imagen de la constellacion del usuario					constellationImageLoader = new Loader();					var constellationImageContext:LoaderContext = new LoaderContext();					constellationImageContext.checkPolicyFile = true;					constellationImageContext.securityDomain = SecurityDomain.currentDomain;					constellationImageContext.applicationDomain = ApplicationDomain.currentDomain;					var constellationImageURLRequest:URLRequest = new URLRequest(DataModel.URL_FILES + response.image);					constellationImageLoader.load(constellationImageURLRequest);					constellationImageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onBulkElementLoadedHandler);					constellationImageLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onBulkElementProgressHandler);					constellationImageLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onErrorHandler);					(sections.constellationModalWindow.container.image as MovieClip).addChild(constellationImageLoader);										// Verificando si la constelacion es ganadora					if(response.winner)					{						// Mostrando sello de constelacion ganadora						(sections.constellationModalWindow.winnerIcon as MovieClip).visible = true;												// Invisibilizar el boton de voto porque ya no admite mas votos						(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;					}				} 				else 				{					sections.registerWindow.statusMsg.visible = true;					trace("success = ko");					return;				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				/**		 * @event		 * Ejecuta acciones una vez terminada las descargas de ficheros externos			 */		public function onBulkElementLoadedHandler(evt:Event):void 		{			trace("LanMachuPicchuFacebookMainController->onBulkElementLoadedHandler()");						// Desactivando detectores de eventos			constellationImageLoader.contentLoaderInfo.removeEventListener(BulkLoader.COMPLETE, onBulkElementLoadedHandler);			constellationImageLoader.contentLoaderInfo.removeEventListener(BulkLoader.PROGRESS, onBulkElementProgressHandler);				constellationImageLoader.contentLoaderInfo.removeEventListener(BulkLoader.ERROR, onErrorHandler);						// Invisibilizando loading			(sections.constellationModalWindow.container.loading as MovieClip).visible = false;		}				/**		 * @event		 * Ejecuta acciones mientras se descargan los ficheros externos			 */		public function onBulkElementProgressHandler(evt:ProgressEvent):void 		{			var percentLoaded:Number = evt.bytesLoaded/evt.bytesTotal;			percentLoaded = Math.round(percentLoaded * 100);			//trace("Cargando imagen: ", percentLoaded);		}													/**		 * @event		 * Ejecuta acciones cuando se captura algun error en la descarga de ficheros externos		 */		public function onErrorHandler(evt:Event):void {				debug(evt.toString());			throw new Error(evt);		}				public function debug(text:Object):void 		{			trace(text);			ExternalInterface.call("console.log", text.toString());		}				private function shareConstellation(evt:MouseEvent):void		{			trace("LanMachuPicchuFacebookMainController->shareConstellation()");						if (ExternalInterface.available) 			{				trace("DataModel.getInstance().flashvars: ", DataModel.getInstance().flashvars);				//trace("DataModel.getInstance().flashvars.cons_id: ", DataModel.getInstance().flashvars.cons_id);				trace("selectedConstellationItemForVote.id: ", selectedConstellationItemForVote.id);								var id:String = (DataModel.getInstance().flashvars != null && DataModel.getInstance().flashvars.cons_id != null) ? DataModel.getInstance().flashvars.cons_id : selectedConstellationItemForVote.id				trace("publishWall with params: ", id);				ExternalInterface.call("publishWall", sections.constellationModalWindow.title_dtxt.text, id);			}		}				private function voteConstellation(evt:MouseEvent):void		{			trace("LanMachuPicchuFacebookMainController->voteConstellation()");						// Eliminando boton de votar			(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;						// Enviando datos al servicio PHP de registro			trace("Enviando datos al servicio PHP de votacion de constelacion...");						// Enviando variable al servicio PHP			var urlVars:URLVariables = new URLVariables();			if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;			else urlVars.access_token = DataModel.ACCESS_TOKEN;			trace("urlVars.access_token: ", urlVars.access_token);						urlVars.constellation = selectedConstellationItemForVote.id;						// Opciones del servicio PHP			var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_VOTE_CONSTELLATION_PHP_SERVICE);			urlPHPServiceRequest.method = URLRequestMethod.POST;			urlPHPServiceRequest.data = urlVars;						// Enviando datos al servicio			var urlLoaderPHPService:URLLoader = new URLLoader();			urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoaderPHPService.addEventListener(Event.COMPLETE, onVoteConstellationPHPServiceComplete);			urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);			urlLoaderPHPService.load(urlPHPServiceRequest);		}				private function editConstellation(evt:MouseEvent):void 		{			trace("LanMachuPicchuFacebookMainController->editConstellation()");						sections.editMessageModalWindow.visible = true;						// Transicion ventana y panel modal 			Tweener.addTween(sections.editMessageModalWindow, {alpha:1, time:1, transition:"easeOutCubic"});			Tweener.addTween(sections.constellationModalWindow, {alpha:0, time:1, transition:"easeOutCubic"});		}				private function acceptEditButtonHandler(evt:MouseEvent):void 		{			editingConstellation = true;			sections.newConstellationWindow.statusMsg.visible = false;						// Transicion ventana y panel modal 			Tweener.addTween(sections.editMessageModalWindow, {alpha:0, time:1, transition:"easeOutCubic"});			Tweener.addTween(sections.modalPanel, {alpha:0, time:1, transition:"easeOutCubic"});			Tweener.addTween(sections.constellationModalWindow, {alpha:0, time:1, transition:"easeOutCubic", onComplete:onCompleteTransitionModalWindow});						// Transicion			transitionBetweenWindows(this.actualWindow, sections.newConstellationWindow);		}				private function cancelEditButtonHandler(evt:MouseEvent):void {			// Transicion ventana y panel modal 			Tweener.addTween(sections.editMessageModalWindow, {alpha:0, time:1, transition:"easeOutCubic"});			Tweener.addTween(sections.constellationModalWindow, {alpha:1, time:1, transition:"easeOutCubic"});		}						private function onVoteConstellationPHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onVoteConstellationPHPServiceComplete()");						trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);			var success:Boolean = StringUtils.stringToBoolean(loader.data.success);			var moment:Boolean = StringUtils.stringToBoolean(loader.data.moment);			trace("Respuesta del servidor [success]: " + success.toString());			trace("Respuesta del servidor [moment]: " + moment);						try			{				if(success) 				{					// Actualizando datos en ventana modal					var votes:uint = uint(sections.constellationModalWindow.number_dtxt.text)					sections.constellationModalWindow.number_dtxt.text = String(votes + 1);					if(LANGUAGE_FRENCH) sections.constellationModalWindow.label_dtxt.text = (votes + 1 > 1) ? "votes" : "votes";					else sections.constellationModalWindow.label_dtxt.text = (votes + 1 > 1) ? "votos" : "voto";					(sections.constellationModalWindow.label_dtxt).x = (sections.constellationModalWindow.number_dtxt as TextField).x + (sections.constellationModalWindow.number_dtxt as TextField).width - 2;					selectedConstellationItemForVote.voted = true;										if(!LANGUAGE_FRENCH)					{						// Verificando si ha sido un momento ganador						if(moment)						{							// Reiniciando campos de la ventana de registro							sections.winnerModalWindow.name_itxt.text = "";							sections.winnerModalWindow.lastname_itxt.text = "";							sections.winnerModalWindow.email_itxt.text = "";							sections.winnerModalWindow.phone_itxt.text = "";							sections.winnerModalWindow.legalBases_chbox.selected = false;														// Verificando si el usuario ganador ya se ha registrado							isWinnerRegistedUser();						}						else						{							// Mostrando ventana de fallo							showLoserModalWindow();						}					}					else					{						sections.constellationModalWindow.frenchMessage.alpha = 0;						sections.constellationModalWindow.frenchMessage.visible = true;						Tweener.addTween(sections.constellationModalWindow.frenchMessage, {alpha:1, time:1, transition:"easeOutCubic"});						Tweener.addTween(sections.constellationModalWindow.frenchMessage, {alpha:0, time:1, transition:"easeOutCubic", delay:3});					}				} 				else 				{					sections.registerWindow.statusMsg.visible = true;					trace("success = ko");					return;				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onModalWindowCloseButtonHandler(evt:MouseEvent):void		{			trace("LanMachuPicchuFacebookMainController->onModalWindowCloseButtonHandler()");						// Si se ha recibido una accion de votar por GET se limpia esta variable para que la proxima vez cargue la constelacion seleccioanda 			if(DataModel.getInstance().flashvars != null && DataModel.getInstance().flashvars.cons_id != null)				DataModel.getInstance().flashvars.cons_id = null;						// Transicion ventana y panel modal 			Tweener.addTween(sections.modalPanel, {alpha:0, time:1, transition:"easeOutCubic"});			Tweener.addTween(sections.constellationModalWindow, {alpha:0, time:1, transition:"easeOutCubic", onComplete:onCompleteTransitionModalWindow});		}				private function onCompleteTransitionModalWindow():void		{			trace("LanMachuPicchuFacebookMainController->onCompleteTransitionModalWindow");						// Reiniciando componentes			(sections.constellationModalWindow.shareButton as SimpleButton).visible = false;			(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;			sections.constellationModalWindow.title_dtxt.text = "";			sections.constellationModalWindow.author_dtxt.text = "";			sections.constellationModalWindow.number_dtxt.text = "";			sections.constellationModalWindow.label_dtxt.text = "";						sections.constellationModalWindow.alpha = 0;			sections.constellationModalWindow.visible = false;			(sections.constellationModalWindow.shareButton as SimpleButton).visible = false;			(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;			sections.modalPanel.alpha = 0;			sections.modalPanel.visible = false;						sections.editMessageModalWindow.alpha = 0;			sections.editMessageModalWindow.visible = false;						// Reiniciar valores de parametros de control			selectedConstellationItemForVote = null;						// Eliminando imagen del contenedor de la ventana modal			if((sections.constellationModalWindow.container.image as MovieClip).numChildren > 0)				(sections.constellationModalWindow.container.image as MovieClip).removeChildAt(0);		}				private function onCompleteTransitionConfirmationModalWindow():void		{			trace("LanMachuPicchuFacebookMainController->onCompleteTransitionConfirmationModalWindow");						// Reiniciando componentes			(sections.constellationModalWindow.shareButton as SimpleButton).visible = false;			(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;			sections.constellationModalWindow.title_dtxt.text = "";			sections.constellationModalWindow.author_dtxt.text = "";			sections.constellationModalWindow.number_dtxt.text = "";			sections.constellationModalWindow.label_dtxt.text = "";						sections.constellationModalWindow.alpha = 0;			sections.constellationModalWindow.visible = false;			(sections.constellationModalWindow.shareButton as SimpleButton).visible = false;			(sections.constellationModalWindow.voteButton as SimpleButton).visible = false;			sections.modalPanel.alpha = 0;			sections.modalPanel.visible = false;						// Reiniciar valores de parametros de control			selectedConstellationItemForVote = null;						// Eliminando imagen del contenedor de la ventana modal			if((sections.constellationModalWindow.container.image as MovieClip).numChildren > 0)				(sections.constellationModalWindow.container.image as MovieClip).removeChildAt(0);						// Actualizando variable de ventana actual			actualWindow = sections.constellationGalleryWindow;						// Actualizando visibilidad de ventanas modales			sections.winnerModalWindow.alpha = 0;			sections.winnerModalWindow.visible = false;			sections.loserModalWindow.alpha = 0;			sections.loserModalWindow.visible = false;			sections.confirmationAwardModalWindow.alpha = 0;			sections.confirmationAwardModalWindow.visible = false;		}				/**		 * @events		 * End Modal Window Functions			 */						private function validateRegisterData(evt:MouseEvent):void		{			trace("LanMachuPicchuFacebookMainController->validateRegisterData()");			trace("sections.registerWindow.legalBases_chbox.selected = ", sections.registerWindow.legalBases_chbox.selected);						sections.registerWindow.statusMsg.visible = false;						// Primer paso de validacion, todos los campos con texto			if(sections.registerWindow.name_itxt.text == "" || sections.registerWindow.lastname_itxt.text == "" || 				sections.registerWindow.email_itxt.text == "" || sections.registerWindow.phone_itxt.text == "" || sections.registerWindow.legalBases_chbox.selected == false) 			{				sections.registerWindow.statusMsg.visible = true;				trace("Error de validacion: Algun campo esta vacio");				return;			}						// Quinto paso de validación, validar email			if(!StringUtils.isValidEmail(sections.registerWindow.email_itxt.text)) 			{				sections.registerWindow.statusMsg.visible = true;				trace("Error de validacion: Email no valido");				return;			}						// Si hemos llegado hasta aqui, la validacion de la informacion es correcta, procediendo a enviar datos al servicio PHP de registro						// Enviando datos al servicio PHP de registro			trace("Enviando datos al servicio PHP de registro...");						// Enviando variable al servicio PHP			var urlVars:URLVariables = new URLVariables();			if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;			else urlVars.access_token = DataModel.ACCESS_TOKEN;			trace("urlVars.access_token: ", urlVars.access_token);						// Configurando variables necesarias para el registro			urlVars.name = sections.registerWindow.name_itxt.text;			urlVars.lastname = sections.registerWindow.lastname_itxt.text;			urlVars.email = sections.registerWindow.email_itxt.text;			urlVars.phone = sections.registerWindow.phone_itxt.text;						// Opciones del servicio PHP			var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_REGISTER_PHP_SERVICE);			urlPHPServiceRequest.method = URLRequestMethod.POST;			urlPHPServiceRequest.data = urlVars;						// Enviando datos al servicio			var urlLoaderPHPService:URLLoader = new URLLoader();			urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoaderPHPService.addEventListener(Event.COMPLETE, onRegisterSendPHPServiceComplete);			urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);			urlLoaderPHPService.load(urlPHPServiceRequest);		}				private function validateWinnerData(evt:MouseEvent):void		{			trace("LanMachuPicchuFacebookMainController->validateWinnerData()");			trace("sections.registerWindow.legalBases_chbox.selected = ", sections.winnerModalWindow.legalBases_chbox.selected);						sections.winnerModalWindow.statusMsg.visible = false;						// Primer paso de validacion, todos los campos con texto			if(sections.winnerModalWindow.name_itxt.text == "" || sections.winnerModalWindow.lastname_itxt.text == "" || 				sections.winnerModalWindow.email_itxt.text == "" || sections.winnerModalWindow.phone_itxt.text == "" || sections.winnerModalWindow.legalBases_chbox.selected == false) 			{				sections.winnerModalWindow.statusMsg.visible = true;				trace("Error de validacion: Algun campo esta vacio");				return;			}						// Quinto paso de validación, validar email			if(!StringUtils.isValidEmail(sections.winnerModalWindow.email_itxt.text)) 			{				sections.winnerModalWindow.statusMsg.visible = true;				trace("Error de validacion: Email no valido");				return;			}						// Si hemos llegado hasta aqui, la validacion de la informacion es correcta, procediendo a enviar datos al servicio PHP de registro						// Enviando datos al servicio PHP de registro			trace("Enviando datos al servicio PHP de registro...");						// Enviando variable al servicio PHP			var urlVars:URLVariables = new URLVariables();			if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;			else urlVars.access_token = DataModel.ACCESS_TOKEN;			trace("urlVars.access_token: ", urlVars.access_token);						// Configurando variables necesarias para el registro			urlVars.name = sections.winnerModalWindow.name_itxt.text;			urlVars.lastname = sections.winnerModalWindow.lastname_itxt.text;			urlVars.email = sections.winnerModalWindow.email_itxt.text;			urlVars.phone = sections.winnerModalWindow.phone_itxt.text;						// Opciones del servicio PHP			var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_REGISTER_PHP_SERVICE);			urlPHPServiceRequest.method = URLRequestMethod.POST;			urlPHPServiceRequest.data = urlVars;						// Enviando datos al servicio			var urlLoaderPHPService:URLLoader = new URLLoader();			urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;			urlLoaderPHPService.addEventListener(Event.COMPLETE, onWinnerSendPHPServiceComplete);			urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);			urlLoaderPHPService.load(urlPHPServiceRequest);		}				private function saveImageToServer(evt:MouseEvent):void 		{			trace("Saving image to server... ");						sections.newConstellationWindow.statusMsg.visible = false;						// Inhabilitar boton de guardar			(sections.newConstellationWindow.saveImageButton as SimpleButton).visible = false;						if(sections.newConstellationWindow.constellationName_itxt.text != "")			{				// Creando imagen dinamicamente				var jpgSource:BitmapData = new BitmapData ((sections.newConstellationWindow.sky as MovieClip).width, (sections.newConstellationWindow.sky as MovieClip).height);				jpgSource.draw(sections.newConstellationWindow.sky);								var jpgEncoder:JPGEncoder = new JPGEncoder(85);				var jpgStream:ByteArray = jpgEncoder.encode(jpgSource);					// Opciones del servicio PHP				var header:URLRequestHeader = new URLRequestHeader("Content-type", "application/octet-stream");				var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_SAVE_IMAGE_PHP_SERVICE);				urlPHPServiceRequest.requestHeaders.push(header);				urlPHPServiceRequest.method = URLRequestMethod.POST;				urlPHPServiceRequest.data = jpgStream;									// Enviando datos al servicio				var urlLoaderPHPService:URLLoader = new URLLoader();				urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;				urlLoaderPHPService.addEventListener(Event.COMPLETE, onSaveImagePHPServiceComplete);				urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);				urlLoaderPHPService.load(urlPHPServiceRequest);			} else {				sections.newConstellationWindow.statusMsg.visible = true;				trace("Error de validacion: Algun campo esta vacio");			}		}				private function transitionBetweenWindows(oldWindow:MovieClip, newWindow:MovieClip):void		{			trace("LanMachuPicchuFacebookMainController->transitionBetweenWindows");			trace("actualWindow: ", oldWindow.name);			trace("nextWindow: ", newWindow.name);						// Cambiando nivel de visibilidad			newWindow.visible = true;						if(oldWindow == sections.newConstellationWindow)				(sections.newConstellationWindow.saveImageButton as SimpleButton).visible = true;						// Realizando animacion			Tweener.addTween(oldWindow, {alpha:0, time:1, transition:"easeOutCubic", onComplete:onCompleteTransitionBetweenWindows, onCompleteParams:[oldWindow, newWindow]});			Tweener.addTween(newWindow, {alpha:1, time:1, transition:"easeOutCubic"});		}				private function onCompleteTransitionBetweenWindows(oldWindow:MovieClip, newWindow:MovieClip):void		{			trace("LanMachuPicchuFacebookMainController->onCompleteTransitionBetweenWindows");			oldWindow.visible = false;			this.actualWindow = newWindow;						trace("actualWindow: ", this.actualWindow.name);		}				private function onIsUserRegisterPHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onIsUserRegisterPHPServiceComplete");			trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);			var isRegisterUser:Boolean = StringUtils.stringToBoolean(loader.data.register);			var isParticipateUser:Boolean = StringUtils.stringToBoolean(loader.data.participate);			trace("Respuesta del servidor [register]: " + isRegisterUser.toString());			trace("Respuesta del servidor [participate]: " + isParticipateUser.toString());						// Trazas de consola			/*			(sections.console as TextField).appendText("\nevt.target.data: " + evt.target.data);			(sections.console as TextField).appendText("\nRespuesta del servidor [register]: " + isRegisterUser.toString());			(sections.console as TextField).appendText("\nRespuesta del servidor [participate]: " + isParticipateUser.toString());			*/						try			{				if(!isRegisterUser) // Usuario NO REGISTRADO				{					//(sections.console as TextField).appendText("\nUsuario NO REGISTRADO");										// Visibilizando boton de participacion para usuarios que aun no han participado					//(sections.homeWindow.participateButton as SimpleButton).visible = true;					(sections.homeWindow.participateButton as SimpleButton).visible = false;					Tweener.addTween(sections.homeWindow.participateButton as SimpleButton, {alpha:1, time:1, transition:"easeOutCubic"});										// Home Window					(sections.homeWindow.participateButton as SimpleButton).addEventListener(MouseEvent.CLICK, showRegisterWindow); 				}				else				{					if(!isParticipateUser)	// Usuario SI REGISTRADO, pero NO PARTICIPADO					{						//(sections.console as TextField).appendText("\nUsuario SI REGISTRADO, pero NO PARTICIPADO");													// Visibilizando boton de participacion para usuarios que aun no han participado						//(sections.homeWindow.participateButton as SimpleButton).visible = true;						(sections.homeWindow.participateButton as SimpleButton).visible = false;						Tweener.addTween(sections.homeWindow.participateButton as SimpleButton, {alpha:1, time:1, transition:"easeOutCubic"});												// Home Window						(sections.homeWindow.participateButton as SimpleButton).addEventListener(MouseEvent.CLICK, showNewConstellationWindow);					}					else	// Usuario SI REGISTRADO, pero SI PARTICIPADO					{						// No se hace nada, el boton de participar permanece invisible												//(sections.console as TextField).appendText("\n// Usuario SI REGISTRADO, pero SI PARTICIPADO");					}				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onIsWinnerRegisterPHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onIsWinnerRegisterPHPServiceComplete");			trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);			var isRegisterUser:Boolean = StringUtils.stringToBoolean(loader.data.register);			var isParticipateUser:Boolean = StringUtils.stringToBoolean(loader.data.participate);			trace("Respuesta del servidor [register]: " + isRegisterUser.toString());			trace("Respuesta del servidor [participate]: " + isParticipateUser.toString());						try			{				if(!isRegisterUser) // Usuario NO REGISTRADO				{					// Mostrando ventana de registro de usuario ganador					showWinnerModalWindow();				}				else	// Usuario SI REGISTRADO				{					// Mostrando ventana de confirmacion de premio					showConfirmationAwardModalWindow();				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onRegisterSendPHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onRegisterSendPHPServiceComplete");						trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);						var success:Boolean = StringUtils.stringToBoolean(loader.data.success);			trace("Respuesta del servidor [success]: " + success.toString());				try			{				if(success) {					showNewConstellationWindow();				} else {					sections.registerWindow.statusMsg.visible = true;					trace("success = ko");					return;				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onWinnerSendPHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onWinnerSendPHPServiceComplete");						trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);						var success:Boolean = StringUtils.stringToBoolean(loader.data.success);			trace("Respuesta del servidor [success]: " + success.toString());						try			{				if(success) {					// Mostrando ventana de confirmacion de premio					showConfirmationAwardModalWindow();				} else {					sections.winnerModalWindow.statusMsg.visible = true;					trace("success = ko");					return;				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onSaveImagePHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onSaveImagePHPServiceComplete");						trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);			var success:Boolean = StringUtils.stringToBoolean(loader.data.success);			var file:String = String(loader.data.file);			trace("Respuesta del servidor [success]: " + success.toString());			trace("Respuesta del servidor [file]: " + file);						try			{				if(success) 				{					// Enviando datos al servicio PHP de registro					trace("Enviando datos al servicio PHP de salvar constelacion...");										// Enviando variable al servicio PHP					var urlVars:URLVariables = new URLVariables();					if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;					else urlVars.access_token = DataModel.ACCESS_TOKEN;															// Configurando variables necesarias para el registro					urlVars.name = sections.newConstellationWindow.constellationName_itxt.text;					urlVars.file = file;										// Enviando edicion activada si la constelacion ha sido activada					if(editingConstellation)						urlVars.edit = 1; 										// Trazas					trace("urlVars.access_token: ", urlVars.access_token);					trace("urlVars.name: ", urlVars.name);					trace("urlVars.file: ", urlVars.file);										// Opciones del servicio PHP					var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_SAVE_CONSTELLATION_PHP_SERVICE);					urlPHPServiceRequest.method = URLRequestMethod.POST;					urlPHPServiceRequest.data = urlVars;										// Enviando datos al servicio					var urlLoaderPHPService:URLLoader = new URLLoader();					urlLoaderPHPService.dataFormat = URLLoaderDataFormat.VARIABLES;					urlLoaderPHPService.addEventListener(Event.COMPLETE, onSaveConstellationPHPServiceComplete);					urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);					urlLoaderPHPService.load(urlPHPServiceRequest);				} 				else 				{					sections.registerWindow.statusMsg.visible = true;					trace("success = ko");					return;				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onSaveConstellationPHPServiceComplete(evt:Event):void		{			trace("LanMachuPicchuFacebookMainController->onSaveConstellationPHPServiceComplete");			trace("evt.target.toString(): " + evt.target.toString());					trace("evt.target.data: " + evt.target.data);						var loader:URLLoader = URLLoader(evt.target);			var success:Boolean = StringUtils.stringToBoolean(loader.data.success);			trace("Respuesta del servidor [success]: " + success.toString());						try			{				if(success) {					editingConstellation = false;					showConfirmationNewConstellationWindow();				} else {					sections.registerWindow.statusMsg.visible = true;					trace("success = ko");					return;				}			}			catch(e:Error)			{				var msg:String = "";				msg += "loader.data.success: " + loader.data.success;				throw new Error(msg);			}		}				private function onSendPHPServiceError(evt:Event):void {			trace("Respuesta del servicio PHP: " + evt.toString());		}				private function onSearchConstellationGalleryEventHandler(evt:Event):void		{			trace("Evento de busqueda capturado:", sections.constellationGalleryWindow.search_itxt.text);						// Invisibilizando objetos de la galeria			sections.constellationGalleryWindow.prevButton.visible = false;			sections.constellationGalleryWindow.viewMyConstellationButton.visible = false;			sections.constellationGalleryWindow.createYourConstellationButton.visible = false;			sections.constellationGalleryWindow.nextButton.visible = false;			sections.constellationGalleryWindow.gallery.item_0.alpha = 0;			sections.constellationGalleryWindow.gallery.item_1.alpha = 0;			sections.constellationGalleryWindow.gallery.item_2.alpha = 0;			sections.constellationGalleryWindow.gallery.item_3.alpha = 0;			sections.constellationGalleryWindow.gallery.item_4.alpha = 0;			sections.constellationGalleryWindow.gallery.item_5.alpha = 0;						// Invisibilizando el loading			(sections.constellationGalleryWindow.gallery.loading as MovieClip).visible = true;						// Haciendo peticion al servicio PHP que devuelte un XML con los datos de la galeria			try			{					// Enviando datos al servicio PHP de registro				trace("Enviando datos al servicio PHP de confeccion de galeria en tiempo real segun la pagina visualizada por el usuario...");								// Enviando variable al servicio PHP				var urlVars:URLVariables = new URLVariables();				if(DataModel.getInstance().flashvars) urlVars.access_token = DataModel.getInstance().flashvars.access_token;				else urlVars.access_token = DataModel.ACCESS_TOKEN;				trace("urlVars.access_token: ", urlVars.access_token);								// Completando con otras variables necesarias en este servicio				urlVars.page = 0;								if(sections.constellationGalleryWindow.search_itxt.text != "" && 					sections.constellationGalleryWindow.search_itxt.text != "Buscar" && 					sections.constellationGalleryWindow.search_itxt.text != "Chercher")						urlVars.search = sections.constellationGalleryWindow.search_itxt.text;								// Opciones del servicio PHP				var urlPHPServiceRequest:URLRequest = new URLRequest(DataModel.URL_GALLERY_PHP_SERVICE);				urlPHPServiceRequest.method = URLRequestMethod.POST;				urlPHPServiceRequest.data = urlVars;								// Enviando datos al servicio				var urlLoaderPHPService:URLLoader = new URLLoader();				urlLoaderPHPService.addEventListener(Event.COMPLETE, onConstellationGalleryPHPServiceComplete);				urlLoaderPHPService.addEventListener(IOErrorEvent.IO_ERROR, onSendPHPServiceError);				urlLoaderPHPService.load(urlPHPServiceRequest);								} catch(e:Error) { throw new Error(e.toString()); }		}	}}